package main

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
)

func main() {
	generateMessage()
	//generateAsset()
}

type image struct {
	name  string
	asset string
}

func generateMessage() {
	wd, err := os.Getwd()
	if err != nil {
		log.Fatalln(err)
	}

	log.Println(wd)
	cmd := exec.Command(
		"protoc",
		"--gofast_out="+wd+"/../../message",
		wd+"/../../message/message.proto",
		"--proto_path="+wd+"/../../message",
	)

	buffer := &bytes.Buffer{}
	cmd.Stdin = buffer
	cmd.Stdout = buffer
	cmd.Stderr = buffer

	err = cmd.Run()
	if err != nil {
		log.Println(buffer.String())
		log.Fatalln(err)
	}
}

func generateAsset() {
	inFs, err := filepath.Glob("./pkg/asset/image/*.png")
	if err != nil {
		log.Fatalln(err)
	}

	var images []image
	for _, f := range inFs {
		bs, err := ioutil.ReadFile(f)
		if err != nil {
			log.Fatalln(err)
		}

		varName := strings.Replace(strings.Replace(f, ".png", "", 1), "pkg/asset/image/", "", 1)

		images = append(images, image{varName, string(bs)})
	}

	outF, err := os.Create("./pkg/asset/image.go")
	if err != nil {
		log.Fatalln(err)
	}

	defer func() {
		if err := outF.Close(); err != nil {
			log.Fatalln(err)
		}
	}()

	if _, err := fmt.Fprintln(outF, "// Code generated by generate. DO NOT EDIT.)"); err != nil {
		log.Fatalln(err)
	}

	if _, err := fmt.Fprintln(outF, ""); err != nil {
		log.Fatalln(err)
	}

	if _, err := fmt.Fprintln(outF, "package asset"); err != nil {
		log.Fatalln(err)
	}

	if _, err := fmt.Fprintln(outF, ""); err != nil {
		log.Fatalln(err)
	}

	for _, image := range images {
		if _, err := fmt.Fprintf(outF, "var %s = []byte(%q)\n", image.name, image.asset); err != nil {
			log.Fatalln(err)
		}
	}

	if _, err := fmt.Fprintln(outF, ""); err != nil {
		log.Fatalln(err)
	}

	if _, err := fmt.Fprintln(outF, "func init() {"); err != nil {
		log.Fatalln(err)
	}

	for _, image := range images {
		if _, err := fmt.Fprintf(outF, "	setImage(\"%s\", %s)\n", image.name, image.name); err != nil {
			log.Fatalln(err)
		}
	}

	if _, err := fmt.Fprintln(outF, "}"); err != nil {
		log.Fatalln(err)
	}
}
