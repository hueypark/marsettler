// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LOGIN_FBS_H_
#define FLATBUFFERS_GENERATED_LOGIN_FBS_H_

#include "flatbuffers/flatbuffers.h"

namespace fbs {

struct Login;
struct LoginBuilder;

struct Login FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef LoginBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4
  };
  int64_t id() const {
    return GetField<int64_t>(VT_ID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_ID) &&
           verifier.EndTable();
  }
};

struct LoginBuilder {
  typedef Login Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(int64_t id) {
    fbb_.AddElement<int64_t>(Login::VT_ID, id, 0);
  }
  explicit LoginBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LoginBuilder &operator=(const LoginBuilder &);
  flatbuffers::Offset<Login> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Login>(end);
    return o;
  }
};

inline flatbuffers::Offset<Login> CreateLogin(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t id = 0) {
  LoginBuilder builder_(_fbb);
  builder_.add_id(id);
  return builder_.Finish();
}

inline const fbs::Login *GetLogin(const void *buf) {
  return flatbuffers::GetRoot<fbs::Login>(buf);
}

inline const fbs::Login *GetSizePrefixedLogin(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<fbs::Login>(buf);
}

inline bool VerifyLoginBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fbs::Login>(nullptr);
}

inline bool VerifySizePrefixedLoginBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fbs::Login>(nullptr);
}

inline void FinishLoginBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<fbs::Login> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedLoginBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<fbs::Login> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace fbs

#endif  // FLATBUFFERS_GENERATED_LOGIN_FBS_H_
