// This file was generated from `./pkg/cmd/generate/generate_handler.go`.

package message

import (
	"errors"
	"fmt"

	"github.com/golang/protobuf/proto"
)

// Handler is message handler.
type Handler struct {
{{ with .Messages }}{{ range . }}	{{ .Handler }} func(*{{ .Message }}) error
{{ end }}{{ end }}}

// HandlerFuncs represents handler functions.
type HandlerFuncs map[ID]interface{}

// NewHandler creates new handler.
func NewHandler(handlers HandlerFuncs) (*Handler, error) {
	h := &Handler{}

	for id, handler := range handlers {
		switch id {
		{{ with .Messages }}{{ range . }}case {{ .Message }}ID:
			v, ok := handler.(func(*{{ .Message }}) error)
			if !ok {
				return nil, errors.New("handler does not handles {{ .Message }}")
			}

			h.{{ .Handler }} = v
		{{ end }}{{ end }}}
	}

	return h, nil
}

// Handle handles message.
func (h *Handler) Handle(id ID, bytes []byte) error {
	switch id {
	{{ with .Messages }}{{ range . }}case {{ .Message }}ID:
		m := &{{ .Message }}{}
		err := proto.Unmarshal(bytes, m)
		if err != nil {
			return err
		}

		if h.{{ .Handler }} == nil {
			return nil
		}

		return h.{{ .Handler }}(m)
	{{ end }}{{ end }}}

	return errors.New(fmt.Sprintf("unhandled id: %v", id))
}
