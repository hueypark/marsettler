// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Actor struct {
	_tab flatbuffers.Table
}

func GetRootAsActor(buf []byte, offset flatbuffers.UOffsetT) *Actor {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Actor{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Actor) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Actor) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Actor) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Actor) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *Actor) NodeId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Actor) MutateNodeId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func ActorStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func ActorAddId(builder *flatbuffers.Builder, Id int64) {
	builder.PrependInt64Slot(0, Id, 0)
}
func ActorAddNodeId(builder *flatbuffers.Builder, NodeId int64) {
	builder.PrependInt64Slot(1, NodeId, 0)
}
func ActorEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
